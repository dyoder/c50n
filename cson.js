// Generated by CoffeeScript 1.6.3
var CoffeeScript, parse, property, quote, stringify, type, _stringify;

CoffeeScript = typeof window !== "undefined" && window !== null ? window.CoffeeScript : void 0;

if (CoffeeScript == null) {
  CoffeeScript = require("coffee-script");
}

type = require("fairmont").type;

parse = (function() {
  var vm;
  if ((typeof window !== "undefined" && window !== null ? window.CoffeeScript : void 0) != null) {
    return function(source) {
      return CoffeeScript["eval"](source, {});
    };
  } else {
    vm = require("vm");
    CoffeeScript = require("coffee-script");
    return function(source) {
      var js, sandbox;
      sandbox = vm.Script.createContext();
      js = CoffeeScript.compile(source, {
        bare: true
      });
      return vm.runInThisContext(js, sandbox);
    };
  }
})();

quote = function(string) {
  return "'" + (string.replace(/'/g, "\\'")) + "'";
};

property = function(key, value) {
  key = key.match(/^[\w_]+$/) ? key : quote(key);
  return "" + key + ": " + value;
};

_stringify = function(object, options) {
  var elements, indent, inner, outer, properties;
  if (options == null) {
    options = {};
  }
  indent = options.indent;
  outer = indent || "";
  inner = outer + "  ";
  switch (type(object)) {
    case "object":
      properties = (function() {
        var key, value, _results;
        _results = [];
        for (key in object) {
          value = object[key];
          _results.push(property(key, _stringify(value, {
            indent: inner
          })));
        }
        return _results;
      })();
      if (properties.length > 0) {
        properties = properties.join("\n" + outer);
        return "\n" + outer + properties + "\n" + outer;
      } else {
        return "{}";
      }
      break;
    case "array":
      elements = (function() {
        var element, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = object.length; _i < _len; _i++) {
          element = object[_i];
          _results.push(_stringify(element, {
            indent: inner
          }));
        }
        return _results;
      })();
      if (elements.length > 0) {
        elements = elements.join("\n" + outer);
        return "[\n" + outer + elements + "\n" + outer + "]";
      } else {
        return "[]";
      }
      break;
    case "string":
      return quote(object.toString());
    case "function":
      break;
    case "null":
      return "null";
    case "undefined":
      return "undefined";
    default:
      return object.toString();
  }
};

stringify = function(object) {
  return (_stringify(object)).slice(1);
};

module.exports = {
  parse: parse,
  stringify: stringify
};
